import discord
from discord.ext import commands
import aiohttp
import asyncio

# --- ‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ---
BASE_API_URL = "http://localhost:8080" 
STORE_ID = 1  # 2. ‡πÉ‡∏™‡πà ID ‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
TICKET_CHANNEL_PREFIX = "ticket-" # ‚≠êÔ∏è 3. ‡πÉ‡∏™‡πà "‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤" ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á Ticket ‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏ô‡∏π

# ---------------------------------------------------------------------
# 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™ Cog
# ---------------------------------------------------------------------
class OrderCog(commands.Cog):
    
    # -----------------------------------------------------------------
    # 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô __init__
    # -----------------------------------------------------------------
    def __init__(self, bot):
        self.bot = bot
        self.restaurant_data = {
            "name": f"‡∏£‡πâ‡∏≤‡∏ô ID {STORE_ID} (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...)",
            "menu": {}  # { "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å": { id, price, original_name, note } }
        }
        self.fetch_task = self.bot.loop.create_task(self.fetch_restaurant_data())

    # -----------------------------------------------------------------
    # 3. (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï) ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á API
    # -----------------------------------------------------------------
    async def fetch_restaurant_data(self):
        """
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å API
        """
        await self.bot.wait_until_ready() 
        
        store_info_endpoint = f"{BASE_API_URL}/store?store_id={STORE_ID}"
        
        # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "products" ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        menu_endpoint = f"{BASE_API_URL}/store/product?store_id={STORE_ID}" 

        async with aiohttp.ClientSession() as session:
            try:
                # --- 1. ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô ---
                print(f"[OrderCog] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏à‡∏≤‡∏Å: {store_info_endpoint}")
                async with session.get(store_info_endpoint) as response:
                    if response.status == 200:
                        data = await response.json()
                        self.restaurant_data["name"] = data.get("name", f"‡∏£‡πâ‡∏≤‡∏ô ID {STORE_ID}")
                        print(f"‚úÖ [OrderCog] ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô: {self.restaurant_data['name']}")
                    else:
                        print(f"‚ùå [OrderCog] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÑ‡∏î‡πâ (Status: {response.status})")

                # --- 2. ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π ---
                print(f"[OrderCog] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å: {menu_endpoint}")
                async with session.get(menu_endpoint) as response:
                    if response.status == 200:
                        raw_products = await response.json() 
                        new_menu = {}
                        
                        for item in raw_products:
                            food_name = item.get("name")
                            if food_name:
                                food_name_lower = food_name.lower()
                                new_menu[food_name_lower] = {
                                    "id": item.get("product_id"),
                                    "price": item.get("price"),
                                    "original_name": food_name,
                                    "note": item.get("note", "") 
                                }
                        
                        self.restaurant_data["menu"] = new_menu
                        print(f"‚úÖ [OrderCog] ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {len(self.restaurant_data['menu'])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                    else:
                        print(f"‚ùå [OrderCog] Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏î‡πâ (Status: {response.status})")
                        self.restaurant_data["menu"] = {}
            
            except Exception as e:
                print(f"‚ùå [OrderCog] Error: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ API ‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà?) : {e}")
                self.restaurant_data["menu"] = {}

    # -----------------------------------------------------------------
    # 4. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !order ( ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è )
    # -----------------------------------------------------------------
    @commands.command()
    async def order(self, ctx, *, item_name_str: str): # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        """
        ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏•‡∏∞ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
        ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: !order ‡∏Å‡∏∞‡πÄ‡∏û‡∏£‡∏≤
        """
        
        if not self.restaurant_data["menu"]:
            await ctx.send(f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡πâ‡∏≤‡∏ô **{self.restaurant_data['name']}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)")
            return

        # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á split(',') ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ loop
        
        product_id_to_send = None   
        item_name_to_display = ""  
        
        cleaned_name = item_name_str.lower().strip() 
        
        if cleaned_name in self.restaurant_data["menu"]:
            food_details = self.restaurant_data["menu"][cleaned_name]
            product_id_to_send = food_details["id"]
            
            # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏£‡∏ß‡∏° note)
            name = food_details["original_name"]
            note = food_details.get("note", "")
            note_display = f" ({note})" if note else ""
            item_name_to_display = f"{name}{note_display}"
        
        # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏à‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not product_id_to_send:
            await ctx.send(f"‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: **{item_name_str.strip()}**")
            return
            
        order_endpoint = f"{BASE_API_URL}/orders/add"
        student_id = ctx.author.id 
        
        # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á "product_id" (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "products_id")
        payload = {
            "student_id": student_id,
            "store_id": STORE_ID,
            "product_id": product_id_to_send # ‚≠êÔ∏è ‡∏™‡πà‡∏á ID ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        }

        print(f"payload: {payload}")  # Debug: ‡πÅ‡∏™‡∏î‡∏á payload ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(order_endpoint, json=payload) as response:
                    
                    if response.status == 200:
                        response_data = await response.json()
                        order_id = response_data.get("id", "N/A") 
                        
                        # 1. ‡∏î‡∏∂‡∏á "‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏¥‡∏ß" (queue_number) ‡∏à‡∏≤‡∏Å API response
                        queue_number = response_data.get("queue_number", "N/A")
                        
                        # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• queue_number ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
                        await ctx.send(
                            f"‚úÖ **‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö!**\n"
                            # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                            f"**‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:** {item_name_to_display}\n"
                            f"**‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå:** `{order_id}`\n"
                            f"**üîî ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏¥‡∏ß‡∏ó‡∏µ‡πà: {queue_number}**" 
                        )
                    else:
                        error_text = await response.text()
                        await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Status: {response.status})\n`{error_text}`")
                        
        except Exception as e:
            await ctx.send(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API: {e}")

    # -----------------------------------------------------------------
    # ‚≠êÔ∏è 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÄ‡∏°‡∏ô‡∏π ( ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è )
    # -----------------------------------------------------------------
    async def _create_menu_embed(self):
        """
        (Helper) ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÅ‡∏¢‡∏Å Logic ‡∏°‡∏≤‡∏à‡∏≤‡∏Å !menu)
        ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Embed object ‡∏´‡∏£‡∏∑‡∏≠ None (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π)
        """
        if not self.restaurant_data["menu"]:
            return None # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π

        menu_display_list = []
        example_items = [] 
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏ô‡∏π ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        for i, food_details in enumerate(self.restaurant_data["menu"].values()):
            name = food_details["original_name"]
            price = food_details["price"]
            note = food_details.get("note", "") 
            note_display = f" ({note})" if note else "" 
            menu_display_list.append(f"- **{name}**{note_display} (‡∏£‡∏≤‡∏Ñ‡∏≤ {price} ‡∏ö‡∏≤‡∏ó)")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏Å‡∏Å‡πá‡∏û‡∏≠)
            if i < 1: # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 1 ‡∏ä‡∏∑‡πà‡∏≠
                example_items.append(name)

        menu_text = "\n".join(menu_display_list)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        embed = discord.Embed(
            title=f"üìã ‡πÄ‡∏°‡∏ô‡∏π‡∏£‡πâ‡∏≤‡∏ô {self.restaurant_data['name']}",
            description=menu_text,
            color=discord.Color.green() # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ä‡∏≠‡∏ö
        )
        
        # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        if example_items:
            example_order_str = example_items[0] # ‚≠êÔ∏è ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏£‡∏Å
            embed.add_field(
                name="üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                value=f"‡∏û‡∏¥‡∏°‡∏û‡πå `!order {example_order_str}`", # ‚≠êÔ∏è ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô (,) ‡∏≠‡∏≠‡∏Å
                inline=False
            )
        else:
            embed.add_field(
                name="üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
                value="‡∏û‡∏¥‡∏°‡∏û‡πå `!order <‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£>`",
                inline=False
            )
        
        return embed # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Embed ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à

    # -----------------------------------------------------------------
    # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) 6. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !menu (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    # -----------------------------------------------------------------
    @commands.command()
    async def menu(self, ctx):
        """
        ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å API
        """
        embed = await self._create_menu_embed() # ‚≠êÔ∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Helper
        
        if embed:
            await ctx.send(embed=embed) # ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô embed
        else:
            await ctx.send("‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")

    # --- üîÅ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !reload (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
    @commands.command()
    @commands.is_owner()
    async def reload(self, ctx):
        """
        ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• API ‡πÉ‡∏´‡∏°‡πà
        """
        await ctx.send("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà...")
        await self.fetch_restaurant_data()
        await ctx.send(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô **{self.restaurant_data['name']}** ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")

    # -----------------------------------------------------------------
    # ‚≠êÔ∏è (‡πÄ‡∏û‡∏¥‡πà‡∏°) 7. Event Listener ‡∏î‡∏±‡∏Å‡∏ü‡∏±‡∏á‡∏ï‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    # -----------------------------------------------------------------
    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        """
        ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô Server
        """
        # 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Text Channel ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not isinstance(channel, discord.TextChannel):
            return
            
        # 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô "ticket-001")
        if channel.name.startswith(TICKET_CHANNEL_PREFIX):
            
            print(f"[OrderCog] ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á Ticket ‡πÉ‡∏´‡∏°‡πà: {channel.name}. ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π...")
            
            # 3. ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏ó Ticket ‡∏¢‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ permission ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à)
            await asyncio.sleep(1) 
            
            # 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Helper ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Embed
            embed = await self._create_menu_embed()
            
            # 5. ‡∏™‡πà‡∏á Embed
            if embed:
                try:
                    await channel.send(
                        f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô **{self.restaurant_data['name']}**\n"
                        # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÉ‡∏ô Ticket ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á
                        "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå `!order <‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£>` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö"
                    )
                    await channel.send(embed=embed)
                except discord.errors.Forbidden:
                    print(f"‚ùå [OrderCog] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {channel.name}")
            else:
                # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                try:
                    await channel.send(f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡πâ‡∏≤‡∏ô **{self.restaurant_data['name']}** ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)")
                except discord.errors.Forbidden:
                    print(f"‚ùå [OrderCog] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á {channel.name}")


# ---------------------------------------------------------------------
# 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô setup (‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤)
# ---------------------------------------------------------------------
async def setup(bot):
    await bot.add_cog(OrderCog(bot))
    # ‚≠êÔ∏è (‡∏õ‡∏£‡∏±‡∏ö) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
    print("[OrderCog] Cog 'order' (v6 - Single Order Only) has been loaded.")
